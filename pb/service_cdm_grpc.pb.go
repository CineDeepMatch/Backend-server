// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: service_cdm.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CineDeepMatch_CreateUser_FullMethodName     = "/pb.CineDeepMatch/CreateUser"
	CineDeepMatch_UpdateUser_FullMethodName     = "/pb.CineDeepMatch/UpdateUser"
	CineDeepMatch_LoginUser_FullMethodName      = "/pb.CineDeepMatch/LoginUser"
	CineDeepMatch_CreateActivity_FullMethodName = "/pb.CineDeepMatch/CreateActivity"
)

// CineDeepMatchClient is the client API for CineDeepMatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CineDeepMatchClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*CreateActivityResponse, error)
}

type cineDeepMatchClient struct {
	cc grpc.ClientConnInterface
}

func NewCineDeepMatchClient(cc grpc.ClientConnInterface) CineDeepMatchClient {
	return &cineDeepMatchClient{cc}
}

func (c *cineDeepMatchClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, CineDeepMatch_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cineDeepMatchClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, CineDeepMatch_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cineDeepMatchClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, CineDeepMatch_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cineDeepMatchClient) CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*CreateActivityResponse, error) {
	out := new(CreateActivityResponse)
	err := c.cc.Invoke(ctx, CineDeepMatch_CreateActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CineDeepMatchServer is the server API for CineDeepMatch service.
// All implementations must embed UnimplementedCineDeepMatchServer
// for forward compatibility
type CineDeepMatchServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	CreateActivity(context.Context, *CreateActivityRequest) (*CreateActivityResponse, error)
	mustEmbedUnimplementedCineDeepMatchServer()
}

// UnimplementedCineDeepMatchServer must be embedded to have forward compatible implementations.
type UnimplementedCineDeepMatchServer struct {
}

func (UnimplementedCineDeepMatchServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCineDeepMatchServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedCineDeepMatchServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedCineDeepMatchServer) CreateActivity(context.Context, *CreateActivityRequest) (*CreateActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivity not implemented")
}
func (UnimplementedCineDeepMatchServer) mustEmbedUnimplementedCineDeepMatchServer() {}

// UnsafeCineDeepMatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CineDeepMatchServer will
// result in compilation errors.
type UnsafeCineDeepMatchServer interface {
	mustEmbedUnimplementedCineDeepMatchServer()
}

func RegisterCineDeepMatchServer(s grpc.ServiceRegistrar, srv CineDeepMatchServer) {
	s.RegisterService(&CineDeepMatch_ServiceDesc, srv)
}

func _CineDeepMatch_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CineDeepMatchServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CineDeepMatch_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CineDeepMatchServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CineDeepMatch_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CineDeepMatchServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CineDeepMatch_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CineDeepMatchServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CineDeepMatch_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CineDeepMatchServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CineDeepMatch_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CineDeepMatchServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CineDeepMatch_CreateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CineDeepMatchServer).CreateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CineDeepMatch_CreateActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CineDeepMatchServer).CreateActivity(ctx, req.(*CreateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CineDeepMatch_ServiceDesc is the grpc.ServiceDesc for CineDeepMatch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CineDeepMatch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CineDeepMatch",
	HandlerType: (*CineDeepMatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _CineDeepMatch_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _CineDeepMatch_UpdateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _CineDeepMatch_LoginUser_Handler,
		},
		{
			MethodName: "CreateActivity",
			Handler:    _CineDeepMatch_CreateActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_cdm.proto",
}
